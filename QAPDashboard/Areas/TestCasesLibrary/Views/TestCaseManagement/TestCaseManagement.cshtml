@using QAPDashboard.Views.Shared.Components.Button
@using QAPDashboard.Views.Shared.Components.Dropdown
@using QAPDashboard.Views.Shared.Components.FilterDropdown
@using QAPDashboard.Views.Shared.Components.Input
@using QAPDashboard.Views.Shared.Components.TableRowInput
@model TestCaseManagementViewModel

@{
  ViewData["Title"] = @Model.TwilioTestCase.TestName;
}

<div class="container mx-auto">
  <div class="mt-8 text-slate-700 px-4 pt-4 rounded">
    <h2 class="text-3xl mb-4">@Model.TwilioTestCase.TestName</h2>
  </div>

  <div id="testcase" class="text-slate-700 rounded">
    <div class="mx-auto w-full">
      <div class="mt-8 text-slate-700 px-4 pt-4 rounded">
        <h2 class="text-2xl text-slate-700">TestCase Details</h2>
      </div>
      <form id="testcaseConfiguration" name="testcaseConfiguration" method="post" action="test-management/test-submit">
        <div id="channelType">
          <input id="channelTypeInput" name="channelTypeInput" type="text" hidden value="voice" />
          @await Component.InvokeAsync("Dropdown", new DropdownViewModel() { Id = "channelTypeDropdown", Label =
          "Channel", Options = ["voice"], FirstItem = "voice", IsDisabled = true })
        </div>
        <div id="testName">
          @await Component.InvokeAsync("Input", new InputViewModel() { Id = "testNameInput", Label = "Name", Value = Model.TwilioTestCase.TestName})
        </div>
        <div id="testType">
          <input id="testTypeInput" name="testTypeInput" type="text" hidden value="Inbound" />
          @await Component.InvokeAsync("Dropdown", new DropdownViewModel() { Id = "testTypeDropdown", Label = "Test Type", Options = ["Inbound"], FirstItem = "Inbound", IsDisabled = true })
        </div>
        <div id="testDescription">
          @await Component.InvokeAsync("Input", new InputViewModel() { Id = "testDescriptionInput", Label = "Description", Value = Model.TwilioTestCase.TestDescription})
        </div>
        <div class="mt-8 text-slate-700 px-4 pt-4 rounded">
          <h2 class="text-2xl text-slate-700">Associated Steps</h2>
          <table id="runsTable" class="w-full bg-white  mt-4 table-auto">
            <thead class="bg-blue-50 text-slate-700">
              <tr>
                <th class="p-4 border border-gray-100">Step</th>
                <th class="p-4 border border-gray-100">Description</th>
                <th class="p-4 border border-gray-100">Expect to Hear</th>
                <th class="p-4 border border-gray-100">Reply With</th>
              </tr>
            </thead>
            <tbody>
            @foreach (var step in Model.TwilioTestCase.TestSteps)
            {
              <tr>
                <td class="p-4 border border-gray-100">@step.Id</td>
                <td class="p-4 border border-gray-100">
                  @await Component.InvokeAsync("TableRowInput", new TableRowInputViewModel() { Id = $"stepDescription_{step.Id}", Value = step.StepName })
                </td>
                <td class="p-4 border border-gray-100">
                  @await Component.InvokeAsync("TableRowInput", new TableRowInputViewModel() { Id = $"expectedResult_{step.Id}", Value = step.ExpectedResult })
                </td>
                <td class="p-4 border border-gray-100">
                  @await Component.InvokeAsync("TableRowInput", new TableRowInputViewModel() { Id = $"replyWith_{step.Id}", Value = step.ReplyWith })
                </td>
              </tr>
            }
            </tbody>
          </table>
          <div class="flex flex-col justify-center items-center">
          @await Component.InvokeAsync("Button", new ButtonViewModel { Type = "button", Text = "Edit Test",
                    TailwindClasses = "w-1/2" })
        </div>
        </div>
      </form>
    </div>
  </div>

</div>


<script>
  const elements = {
    dateRangeFilterDropdown: document.querySelector("#dateRangeDropdown"),
    dateRangeFilterInput: document.querySelector("#dateRangeFilter"),
    dateInputContainer: document.getElementById("customRange"),
    startDateInput: document.getElementById("startDate"),
    endDateInput: document.getElementById("endDate"),
  }

  window.onloadeddata = updateDateRangeFilterInput();

  function updateDateRangeFilterInput() {
    if (elements.dateRangeFilterInput.value === "Custom Range") {
      elements.dateInputContainer.style.display = "grid";
    }
  }

  function onDateRangeFilterChange(event) {
    if (event.target.value === "Custom Range") {
      elements.dateInputContainer.style.display = "grid";
    } else {
      elements.dateInputContainer.style.display = "none";
    }
    elements.dateRangeFilterInput.value = event.target.value;
    //event.target.form.submit();
  }

  document.addEventListener("DOMContentLoaded", () => {
    elements.dateRangeFilterDropdown.addEventListener("change", onDateRangeFilterChange);
  });
</script>