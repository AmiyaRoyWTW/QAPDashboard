@using QAPDashboard.Views.Shared.Components.Button
@using QAPDashboard.Views.Shared.Components.Checkbox
@using QAPDashboard.Views.Shared.Components.Dropdown
@using QAPDashboard.Views.Shared.Components.FilterDropdown
@using QAPDashboard.Views.Shared.Components.Input
@using QAPDashboard.Views.Shared.Components.Paragraph
@using QAPDashboard.Views.Shared.Components.TableRowInput
@using QAPDashboard.Views.Shared.Components.TextArea
@model TestCaseManagementViewModel

@{
  ViewData["Title"] = @Model.TwilioTestCase.TestName;
}

<div class="container mx-auto">
  <div class="mt-8 text-slate-700 px-4 pt-4 rounded">
    <h2 class="text-3xl mb-4">@Model.TwilioTestCase.TestName</h2>
  </div>

  <div id="testcase" class="text-slate-700 rounded">
    <div class="mx-auto w-full">
      <div class="mt-8 text-slate-700 px-4 pt-4 rounded">
        <h2 class="text-2xl text-slate-700">TestCase Details</h2>
      </div>
      <form id="testcaseConfiguration" name="testcaseConfiguration" method="post" action="test-submit">
        <input id="oldTestName" name="oldTestName" type="text" hidden value="@Model.TwilioTestCase.TestName" />
        <div id="channelType">
          <input id="channelTypeInput" name="channelTypeInput" type="text" hidden value="voice" />
          @await Component.InvokeAsync("Dropdown", new DropdownViewModel() { Id = "channelTypeDropdown", Label =
          "Channel", Options = ["voice"], FirstItem = "voice", IsDisabled = true })
        </div>
        <div id="testName">
          @await Component.InvokeAsync("Input", new InputViewModel() { Id = "testNameInput", Name="TestName", Label = "Name", Value = @Model.TwilioTestCase.TestName})
        </div>
        <div id="testType">
          <input id="testTypeInput" name="testTypeInput" type="text" hidden value="Inbound" />
          @await Component.InvokeAsync("Dropdown", new DropdownViewModel() { Id = "testTypeDropdown", Label = "Test Type", Options = ["Inbound"], FirstItem = "Inbound", IsDisabled = true })
        </div>
        <div id="testDescription">
          @await Component.InvokeAsync("Input", new InputViewModel() { Id = "testDescriptionInput", Name = "TestDescription", Label = "Description", Value = @Model.TwilioTestCase.TestDescription})
        </div>
        <div class="mt-8 text-slate-700 px-4 pt-4 rounded">
          <h2 class="text-2xl text-slate-700">Associated Steps</h2>
          <table id="stepsTable" class="w-full bg-white mt-4 table-auto">
            <thead class="bg-blue-50 text-slate-700">
              <tr>
                <th class="p-4 border border-gray-100"></th>
                <th class="p-4 border border-gray-100">Step</th>
                <th class="p-4 border border-gray-100">Description</th>
                <th class="p-4 border border-gray-100">Expect to Hear</th>
                <th class="p-4 border border-gray-100">Reply With</th>
              </tr>
            </thead>
            <tbody>
              @{
                var id = 0;
                var stepId = 1;
                @foreach (var step in Model.TwilioTestCase.TestSteps)
                {
                  <tr>
                    <td class="p-4 border border-gray-100">
                      @await Component.InvokeAsync("Checkbox", new CheckboxViewModel() { Id = $"check_{id}", Name = $"TestSteps[{@id}].IsSelected", Value = "true" })
                    </td>
                    <td class="p-4 border border-gray-100">
                      @await Component.InvokeAsync("TableRowInput", new TableRowInputViewModel() { Id = $"stepId_{id}", Name = $"TestSteps[{@id}].Id", Value = (@stepId).ToString(), Enabled = false })
                    </td>
                    <td class="p-4 border border-gray-100">
                      @await Component.InvokeAsync("TableRowInput", new TableRowInputViewModel() { Id = $"stepDescription_{id}", Name = $"TestSteps[{@id}].StepName", Value = @step.StepName })
                    </td>
                    <td class="p-4 border border-gray-100">
                      @await Component.InvokeAsync("Paragraph", new ParagraphViewModel() { Id = $"expectedResult_{id}", Name = $"TestSteps[{@id}].ExpectedResult", Value = @step.ExpectedResult, HiddenInput = true, Editable = true })
                    </td>
                    <td class="p-4 border border-gray-100">
                      @await Component.InvokeAsync("TableRowInput", new TableRowInputViewModel() { Id = $"replyWith_{id}", Name = $"TestSteps[{@id}].ReplyWith", Value = @step.ReplyWith })
                    </td>
                  </tr>
                  id++;
                  stepId++;
                }
              }
            </tbody>
          </table>
          <div class="w-1/2 flex flex-row justify-center items-center mt-4 mr-2">
          @await Component.InvokeAsync("Button", new ButtonViewModel { Id = "Edit", Type = "submit", Text = "Edit Test",
                    TailwindClasses = "w-1/2 mr-4" })
          @await Component.InvokeAsync("Button", new ButtonViewModel { Id = "AddStep", Type = "button", Text = "Add Step",
                    TailwindClasses = "w-1/2" })
          @await Component.InvokeAsync("Button", new ButtonViewModel { Id = "Delete", Type = "button", Text = "Delete", IsHidden = true,
                    TailwindClasses = "w-1/2" })
          @await Component.InvokeAsync("Button", new ButtonViewModel { Id = "Save", Type = "button", Text = "Save", IsHidden = true,
                    TailwindClasses = "w-1/2" })
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

@*<script>
  const form = document.getElementById("testcaseConfiguration");
  const submitter = document.querySelector("#Edit");
  const formData = new FormData(form, submitter);

  const output = document.getElementById("output");

for (const [key, value] of formData) {
  output.textContent += `${key}: ${value}\n`;
}
</script>*@

<script>
  const elements = {
      editButton: document.querySelector("#Edit"),
      addStepButton: document.querySelector("#AddStep"),
      deleteButton: document.querySelector("#Delete"),
      saveButton: document.querySelector("#Save"),
      stepTable: document.querySelector("#stepsTable")
    }

  function enableDisableDeleteButton(event) {
    let deleteEnabled = false;
    let stepChecks = document.querySelectorAll("input[type=checkbox]");
    for (let i = 0; i < stepChecks.length; i++) {
      if (stepChecks[i].checked) {
        deleteEnabled = true;
        break;
      }
    }
    (deleteEnabled) ? elements.deleteButton.hidden = false : elements.deleteButton.hidden = true;
    (deleteEnabled) ? elements.saveButton.hidden = false : elements.saveButton.hidden = true;
  }

  function updateParagraph(event) {
    const paragraphs = document.getElementsByTagName("p");
    for (let i = 0; i < paragraphs.length; i++) {
      var inputEl = document.getElementById(paragraphs[i].id);
      inputEl.value = paragraphs[i].textContent;
    }
  }

  function addNewStep(){
      let stepTable = document.getElementById("stepsTable");
      const rowCount = stepTable.rows.length;
      var existingRow = elements.stepTable.rows[1];
      let newRow = stepTable.insertRow(rowCount);
      let cell1 = newRow.insertCell(0);
      let cell2 = newRow.insertCell(1);
      let cell3 = newRow.insertCell(2);
      let cell4 = newRow.insertCell(3);
      let cell5 = newRow.insertCell(4);
      const className = existingRow.cells[0].className;
      cell1.className = className;
      cell2.className = className;
      cell3.className = className;
      cell4.className = className;
      cell5.className = className;
      updateTableElementProperties(newRow, existingRow, rowCount-2, "new");
      elements.saveButton.hidden = false;
  }

  function updateTableElementProperties(tableRow, existingRow, newIndex, rowType){
    let stepDescription = "";
    let expectedResult = "";
    let replyWith = "";
    if(rowType == "existing"){
      stepDescription = tableRow.cells[2].children[0].value;
      expectedResult = tableRow.cells[3].children[1].textContent;
      replyWith = tableRow.cells[4].children[0].value;
    }
    for (let i = 0; i < tableRow.cells.length; i++) {
      tableRow.cells[i].innerHTML = existingRow.cells[i].innerHTML;
    }

    tableRow.cells[0].children[1].value = "true";
    tableRow.cells[1].children[0].value = "";
    tableRow.cells[2].children[0].value = stepDescription;
    tableRow.cells[3].children[1].textContent = expectedResult;
    tableRow.cells[4].children[0].value = replyWith;
  }

  function arrangeTableRows() {
    const table = document.getElementById("stepsTable");
    for (let i = 1; i < table.rows.length; i++) {
        const row = table.rows[i];
        row.cells[1].children[0].value = i;
        for (let j = 0; j < row.cells.length; j++) {
            updateIdAndNamePropertyIndex(row.cells[j], i - 1);
        }
    }
  }

  function updateIdAndNamePropertyIndex(tableCell, newIndex) {
    for (let i = 0; i < tableCell.children.length; i++) {
        const child = tableCell.children[i];  // To avoid repeated lookup

        // Check and update id if it's a non-empty string
        if (typeof child.id === 'string' && child.id) {
            child.id = child.id.replace(/_\d+/, `_${newIndex}`);
        }

        // Check and update name if it's a non-empty string
        if (typeof child.name === 'string' && child.name) {
            child.name = child.name.replace(/\[\d+\]/, `[${newIndex}]`);
        }
    }
  }

  function deleteSteps(event){
    let stepTable = document.getElementById("stepsTable");
    let stepChecks = document.querySelectorAll("input[type=checkbox]");
    let deletedRows = 0;
    for (let i = 0; i < stepChecks.length; i++) {
      if (stepChecks[i].checked) {
        var rowId = i+1-deletedRows;
        stepTable.deleteRow(rowId);
        if(stepTable.rows[rowId] != null){
          updateTableElementProperties(stepTable.rows[rowId], stepTable.rows[rowId], rowId, "existing");
        }
        deletedRows++;
      }
    }
    enableDisableDeleteButton();
    elements.saveButton.hidden = false;
  }

  document.addEventListener("DOMContentLoaded", () => {
      elements.editButton.addEventListener("click", updateParagraph);
      elements.addStepButton.addEventListener("click", addNewStep);
      /*document.querySelectorAll("input[type=checkbox]").forEach((stepCheck) => {
        stepCheck.addEventListener("change", enableDisableDeleteButton);
      });*/
      elements.deleteButton.addEventListener("click", deleteSteps);
      elements.saveButton.addEventListener("click", arrangeTableRows);
    });

    // Add event listener to a parent container (like the body or form)
    document.body.addEventListener("change", function(event) {
      // Check if the target is a checkbox
      if (event.target && event.target.type === "checkbox") {
        enableDisableDeleteButton(event);
      }
    });

  </script>