@using QAPDashboard.Views.Shared.Components.Button
@using QAPDashboard.Views.Shared.Components.FilterDropdown
@model ExecutedTestViewModel

@{
  ViewData["Title"] = "Execution List";
}
@section AddedStyles
{
  <link rel="stylesheet" type="text/css" href="~/css/flowbite.min.css" asp-append-version="true" />
}

<div class="container mx-auto">
  <div class="mt-8 text-slate-700 px-4 pt-4 rounded">
    <h2 class="text-3xl mb-4">Filter Report</h2>
  </div>

  <div class="w-full flex justify-items-start flex-row lg:flex-row">
    <form action="@Url.Content("~/execution-list")" class="w-1/2 space-y-6">
      <div class="grid grid-cols-2 gap-4">
        @await Component.InvokeAsync("FilterDropdown", new FilterDropdownViewModel() { Id = "dateRangeDropdown", Name =
        "dateRangeDropdown", Label = "Report From", Options = Model.DateRanges, SelectedItem =
        Model.SelectedDateRange })
        <input type="hidden" id="dateRangeFilter" name="dateRangeFilter" value="@Model.SelectedDateRange" />
      </div>
      <div id="customRange" class="grid grid-rows-2 gap-4" style="display: none;">
        <div class="w-1/2 grid grid-cols-1 gap-4">
          <div class="flex items-center">
            <label for="startDate"
              class="bg-blue-500 text-white px-2 py-2 text-center w-20 mr-1 rounded-lg">From</label>
            <input type="date" id="=startDate" name="startDate"
              class="w-full rounded-lg p-2 focus:outline-none bg-white" value="@Model.CustomStartDate">
          </div>
        </div>
        <div class="w-1/2 grid grid-cols-1 gap-4">
          <div class="flex items-center">
            <label for="endDate" class="bg-blue-500 text-white px-2 py-2 text-center w-20 mr-1 rounded-lg">To</label>
            <input type="date" id="endDate" name="endDate" class="w-full rounded-lg p-2 focus:outline-none bg-white"
              value="@Model.CustomEndDate">
          </div>
        </div>
      </div>
      <div class="flex flex-col justify-center items-end">
        @await Component.InvokeAsync("Button", new ButtonViewModel { Type = "submit", Text = "Filter",
                TailwindClasses = "w-1/2" })
      </div>
    </form>
  </div>

  <div class="grid grid-cols mt-8 text-slate-700 px-4 pt-4 rounded">
    <div class="flex justify-start">
      @foreach (var test in Model.ExecutedTests)
      {
        var circleColor = test.LastExecutionStatus switch
        {
          "Passed" => "bg-green-500",
          "Failed" => "bg-red-500",
          "In Progress" => "bg-yellow-300",
          "Unknown" => "bg-gray-400",
          _ => "bg-gray-500"
        };
        var shadowColor = test.LastExecutionStatus switch
        {
          "Passed" => "shadow-green-500/50",
          "Failed" => "shadow-red-500/50",
          "In Progress" => "shadow-yellow-500/50",
          "Unknown" => "shadow-gray-500/50",
          _ => "shadow-gray-100"
        };
        <div class="items-center grid grid-rows-2 gap-4">
          <a href="/run-list/@test.TestName"
            class="relative flex items-center border border-gray-100 p-8 rounded-lg shadow-lg">
            <div
              class="relative inline-flex items-center justify-center w-50 h-50 overflow-hidden @circleColor rounded-full dark:@circleColor shadow-lg @shadowColor">
            </div>
          </a>
          <span class="relative inline-flex items-center justify-center text-2xl text-gray-600 dark:text-gray-300">
            <a href="/run-list/@test.TestName" class="text-blue-500 hover:underline">@test.TestName</a>
          </span>
        </div>
      }
    </div>
    <div class="flex justify-between mt-4 w-1/3">
      <span
        class="inline-flex items-center bg-green-300 text-green-600 text-xl font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">
        <span class="w-3 h-3 me-1 bg-green-600 rounded-full"></span>
        Passed
      </span>
      <span
        class="inline-flex items-center bg-red-300 text-red-500 text-xl font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">
        <span class="w-3 h-3 me-1 bg-red-500 rounded-full"></span>
        Failed
      </span>
      <span
        class="inline-flex items-center bg-gray-300 text-gray-600 text-xl font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">
        <span class="w-3 h-3 me-1 bg-gray-600 rounded-full"></span>
        Unknown
      </span>
      <span
        class="inline-flex items-center bg-yellow-200 text-yellow-500 text-xl font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">
        <span class="w-3 h-3 me-1 bg-yellow-500 rounded-full"></span>
        In Progress
      </span>
    </div>
  </div>

  @*<div class="mt-8 text-slate-700 px-4 pt-4 rounded">
    <table id="runsTable" class="w-full bg-white  mt-4 table-auto">
      <thead class="bg-blue-50 text-slate-700">
        <tr>
          <th class="p-4 border border-gray-300">Tests</th>
          <th class="p-4 border border-gray-300">Status</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var test in Model.ExecutedTests)
        {
          <tr>
            <td class="p-4 border border-gray-300">
              <a href="/run-list/@test.TestName" class="text-blue-500 hover:underline">@test.TestName</a>
            </td>
            <td class="p-4 border border-gray-300">@test.LastExecutionStatus</td>
          </tr>
        }
      </tbody>
    </table>
  </div>*@

</div>


<script>
  const elements = {
    dateRangeFilterDropdown: document.querySelector("#dateRangeDropdown"),
    dateRangeFilterInput: document.querySelector("#dateRangeFilter"),
    dateInputContainer: document.getElementById("customRange"),
    startDateInput: document.getElementById("startDate"),
    endDateInput: document.getElementById("endDate"),
  }

  window.onloadeddata = updateDateRangeFilterInput();

  function updateDateRangeFilterInput() {
    if (elements.dateRangeFilterInput.value === "Custom Range") {
      elements.dateInputContainer.style.display = "grid";
    }
  }

  function onDateRangeFilterChange(event) {
    if (event.target.value === "Custom Range") {
      elements.dateInputContainer.style.display = "grid";
    } else {
      elements.dateInputContainer.style.display = "none";
    }
    elements.dateRangeFilterInput.value = event.target.value;
    //event.target.form.submit();
  }

  document.addEventListener("DOMContentLoaded", () => {
    elements.dateRangeFilterDropdown.addEventListener("change", onDateRangeFilterChange);
  });
</script>