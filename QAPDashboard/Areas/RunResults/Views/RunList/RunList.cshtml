@using QAPDashboard.Views.Shared.Components.Button;
@model RunListViewModel;

@{
  ViewData["Title"] = "Call List";
}

<div class="container mx-auto">
  <div id="runs" class="mt-8 text-slate-700 px-4 pt-4 rounded">
    <h2 class="text-3xl mb-4">Call Results</h2>

    <form action="@Url.Content("~/")" class="p-4">
      <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
        <div class="md:col-span-2">
          <div class="grid grid-cols-2 gap-4">
            <div class="flex items-center border border-gray-300">
              <label for="startDate" class="bg-bluegw-800 text-white px-2 py-2 text-center w-20">From</label>
              <input type="date" name="startDate" class="w-full rounded p-2 focus:outline-none bg-white">
            </div>

            <div class="flex items-center border border-gray-300">
              <label for="endDate" class="bg-bluegw-800 text-white px-2 py-2 text-center w-20">To</label>
              <input type="date" name="endDate" class="w-full rounded p-2 focus:outline-none bg-white">
            </div>
          </div>
        </div>
        <div class="md:col-span-1 w-full flex items-end">
          @await Component.InvokeAsync("Button", new ButtonViewModel { Type = "submit", Text = "Search by date range",
          TailwindClasses = "w-full" })
        </div>
      </div>
    </form>

    <div id="RunDetailChart" class="w-full h-full flex flex-row items-center">
      <div class="py-6" id="donut-chart" style="width: 100%; height: 100%;"></div>
    </div>

    <table id="runsTable" class="w-full bg-white  mt-4 table-auto">
      <thead class="bg-bluegw-100 text-slate-700">
        <tr>
          <th class="p-4 border border-gray-300">Id</th>
          <th class="p-4 border border-gray-300">Date</th>
          <th class="p-4 border border-gray-300">Called Number</th>
          <th class="p-4 border border-gray-300">Duration</th>
          <th class="p-4 border border-gray-300">Detailed Result</th>
          <th class="p-4 border border-gray-300">Result</th>
          <th class="p-4 border border-gray-300">Audio</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var run in Model.Runs)
        {
          <tr class="bg-white hover:bg-sky-50">
            <td class="p-4 border border-gray-300">
              <a href="/run-result/@run.RunName" class="text-blue-500 hover:underline">@run.RunName</a>
            </td>
            <td class="p-4 border border-gray-300">@run.Date.ToString("yyyy/MM/dd HH:mm:ss")</td>
            <td class="p-4 border border-gray-300">{EarlyMedia}@run.CalledNumber;From:@run.CallingNumber</td>
            <td class="p-4 border border-gray-300">@run.Duration</td>
            <td class="p-4 border border-gray-300">@run.DetailedResults</td>
            <td class="p-4 border border-gray-300">
              <div class="border-2 border-solid bg-green-500 opacity-100 font-extrabold text-center">
                @run.Result
              </div>
            </td>
            <td class="p-4 border border-gray-300">
              <button type="button" id="audiodownload" class="text-blue bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center me-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" onclick="downloadAudio('@run.RunName', '@run.AudioFileName')">
                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 18">
                  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 1v11m0 0 4-4m-4 4L4 8m11 4v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3"/>
                </svg>
              </button>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</div>

@section Scripts
{
  <script>
    var dataTable = new DataTable("#runsTable", {
      columns: [
        { select: 1, sort: "asc" },
      ],
      perPage: 10,
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

  <script>
    const getChartOptions = () => {
      return {
        series:
          [
            @Model.Runs.ToList().Where(x => x.Result == "Success").Count(),
            @Model.Runs.ToList().Where(x => x.Result == "Failed").Count(),
            @Model.Runs.ToList().Where(x => x.Result == "Errored").Count(),
            @Model.Runs.ToList().Where(x => x.Result == "In Progress").Count(),
            @Model.Runs.ToList().Where(x => x.Result == "Unknown").Count(),
          ],
        colors: ["#38761d", "#cc0000", "#990000", "#f1c232", "#999999"],
        chart: {
          height: 420,
          width: "100%",
          type: "donut",
        },
        stroke: {
          colors: ["transparent"],
          lineCap: "",
        },
        plotOptions: {
          pie: {
            donut: {
              labels: {
                show: true,
                name: {
                  show: true,
                  fontFamily: "Inter, sans-serif",
                  offsetY: 20,
                },
                total: {
                  showAlways: true,
                  show: true,
                  label: "Total Calls",
                  fontFamily: "Inter, sans-serif",
                  formatter: function (w) {
                    const sum = w.globals.seriesTotals.reduce((a, b) => {
                      return a + b
                    }, 0)
                    return sum
                  },
                },
                value: {
                  show: true,
                  fontFamily: "Inter, sans-serif",
                  offsetY: -20,
                  formatter: function (value) {
                    return value
                  },
                },
              },
              size: "80%",
            },
          },
        },
        grid: {
          padding: {
            top: -2,
          },
        },
        labels: ["Success", "Failed", "Errored", "In Progress", "Unknown"],
        dataLabels: {
          enabled: false,
        },
        legend: {
          position: "bottom",
          fontFamily: "Inter, sans-serif",
        },
        yaxis: {
          labels: {
            formatter: function (value) {
              return value
            },
          },
        },
        xaxis: {
          labels: {
            formatter: function (value) {
              return value
            },
          },
          axisTicks: {
            show: false,
          },
          axisBorder: {
            show: false,
          },
        },
      }
    }

    if (document.getElementById("donut-chart") && typeof ApexCharts !== 'undefined') {
      const chart = new ApexCharts(document.getElementById("donut-chart"), getChartOptions());
      chart.render();

      // Get all the checkboxes by their class name
      const checkboxes = document.querySelectorAll('#devices input[type="checkbox"]');

      // Function to handle the checkbox change event
      function handleCheckboxChange(event, chart) {
        const checkbox = event.target;
        if (checkbox.checked) {
          switch (checkbox.value) {
            case 'desktop':
              chart.updateSeries([15.1, 22.5, 4.4, 8.4]);
              break;
            case 'tablet':
              chart.updateSeries([25.1, 26.5, 1.4, 3.4]);
              break;
            case 'mobile':
              chart.updateSeries([45.1, 27.5, 8.4, 2.4]);
              break;
            default:
              chart.updateSeries([55.1, 28.5, 1.4, 5.4]);
          }

        } else {
          chart.updateSeries([35.1, 23.5, 2.4, 5.4]);
        }
      }

      // Attach the event listener to each checkbox
      checkboxes.forEach((checkbox) => {
        checkbox.addEventListener('change', (event) => handleCheckboxChange(event, chart));
      });
    }
  </script>

  @*<script src="https://unpkg.com/axios/dist/axios.min.js"></script>*@
  <script>
    /*function startDownload(audioUrl, audioFileName) {
      axios({
        url: audioUrl,
        method: 'GET',
        headers: {
          'Content-Type': 'audio/x-wav',
          'Authorization': 'Basic ' + btoa(':'),
        },
        responseType: 'arraybuffer',
      }).then((response) => {
        if(response.status === 200) {
          const url = window.URL.createObjectURL(new Blob([response.data], { type: 'audio/x-wav' }));
          const link = document.createElement('a');
          link.href = url;
          link.setAttribute('download', audioFileName);
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          window.URL.revokeObjectURL(url);
        }
        else{
          console.log('Error');
        }
      }).catch((error) => {
        console.log(error);
      });
    }*/

    async function downloadAudio(runName, audioFileName){
      const apiUrl = `/api/audio?runId=${runName}`;
      const response = await fetch(apiUrl);

      // Check if the response is successful
      if (!response.ok) {
        throw new Error('Failed to fetch audio.');
      }
      const audioBlob = await response.blob();
      const url = window.URL.createObjectURL(audioBlob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', audioFileName);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    }
  </script>
}
