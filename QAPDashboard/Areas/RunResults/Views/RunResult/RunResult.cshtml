@using QAPDashboard.Views.Shared.Components.Button;
@using QAPDashboard.Views.Shared.Components.Spinner;
@model RunResultViewModel

@{
    ViewData["Title"] = "Test Results: " + @Model.RunId;
}

@section AddedStyles
{
    <script src="~/js/site.js" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="~/css/output.css" asp-append-version="true" />
}

<div class="container mx-auto">
    <div id="callDetails" class="mt-8 text-slate-700 rounded p-4">
        <h2 class="text-3xl mb-4">Call Details</h2>
        <table id="runsTable" class="w-full bg-white mt-4 table-auto border border-gray-100">
            <thead class="bg-blue-100 text-slate-700">
                <tr>
                    <th class="p-4 border border-gray-100">Result</th>
                    <th class="p-4 border border-gray-100">Dial Result</th>
                    <th class="p-4 border border-gray-100">Run Date</th>
                    <th class="p-4 border border-gray-100">Duration</th>
                </tr>
            </thead>
            <tbody>
                <tr class="bg-white hover:bg-sky-50">
                    <td class="text-3xl text-center font-bold">@Model.RunStatus</td>
                    <td class="font-abold text-3xl text-center">@Model.DialResult</td>
                    <td class="font-bold text-3xl text-center">@Model.RunDate.ToString("HH:mm:ss")</td>
                    <td class="font-bold text-3xl text-center">@Model.RunDuration</td>
                </tr>
                <tr class="bg-white hover:bg-sky-50">
                    <td class="truncate"></td>
                    <td class="truncate"></td>
                    <td class="p-4 text-center border-none font-light">@Model.RunDate.ToString("MM/dd/yyyy")</td>
                    <td class="p-4 text-center border-none font-light">hh:mm:ss</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div id="resultSummary" class="text-slate-700 rounded p-4">
        <table id="resultsSummaryTable" class="w-full bg-white table-auto mt-8 border border-gray-100">
            <thead class="bg-blue-100 text-slate-700">
                <tr>
                    <th class="p-4 border border-gray-100">Result Summary</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <div class="flex text-slate-700 rounded">
                            <table class="w-full bg-white table-auto border border-gray-100">
                                <tbody>
                                    <tr>
                                        <td class="font-bold text-2xl text-right">Test Case:</td>
                                        <td class="font-light text-2xl text-left">@Model.TestName</td>
                                    </tr>
                                    <tr>
                                        <td class="font-bold text-2xl text-right">Test Description:</td>
                                        <td class="font-light text-2xl text-left">@Model.TestDescription</td>
                                    </tr>
                                </tbody>
                            </table>
                            <table class="w-full bg-white table-auto border border-gray-100">
                                <tbody>
                                    <tr>
                                        <td class="font-bold text-2xl text-right">Duration:</td>
                                        <td class="font-light text-2xl text-left">@Model.RunDuration
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="font-bold text-2xl text-right">Result:</td>
                                        <td class="font-light text-2xl text-left">@Model.RunStatus</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div id="callRecordings" class="mt-8 text-slate-700 rounded p-4">
        <h2 class="text-3xl mb-4">Call Recordings</h2>
        <script type="module" src="https://cdn.jsdelivr.net/npm/player.style/tailwind-audio/+esm"></script>
        <script src="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.js"></script>
        @*<media-theme-tailwind-audio>
            <audio
                slot="media"
                src=URL.cre@Model.AudioFile
                playsinline
                crossorigin
            ></audio>
        </media-theme-tailwind-audio>*@

        <div class="flex flex-col items-center space-y-4" id="audio-player-container">
            <!-- Audio Player -->
            <audio id="audio-player" class="w-full" controls>
                <source id="audio-source" src="" type="audio/wav">
                Your browser does not support the audio element.
            </audio>
            <!-- Spinner -->
            @await Component.InvokeAsync("Spinner", new SpinnerViewModel { Id = "audio-spinner", Class = "w-16 h-16",
            Style = "display: block;" })

            <button id="load-audio-btn" onclick="playAudio('@Model.RunId')"
                class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600" hidden>
                Play Audio
            </button>
        </div>
    </div>

    <div id="stepDetails" class="mt-8 text-slate-700 rounded p-4">
        <h2 class="text-3xl mb-4">Step Details</h2>
        <table id="runsTable" class="w-full bg-white mt-4 table-auto">
            <thead class="bg-blue-100 text-slate-700">
                <tr>
                    <th class="p-4 border border-gray-100 border-l-4">Step</th>
                    <th class="p-4 border border-gray-100">Description</th>
                    <th class="p-4 border border-gray-100">Expect to Hear</th>
                    <th class="p-4 border border-gray-100">Transcription</th>
                    <th class="p-4 border border-gray-100">Reply With</th>
                    <th class="p-4 border border-gray-100">Detailed Result</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var step in Model.Steps)
                {
                    <tr class="bg-white hover:bg-sky-50">
                        @{
                            var borderleftcolor = step.Status.ToLower() switch
                            {
                                "passed" => "border-l-green-500",
                                "failed" => "border-l-red-400",
                                "callinprogress" => "border-l-yellow-200",
                                "notrun" => "border-l-grey-200",
                                "errored" => "border-l-red-600",
                                _ => "border-l-yellow-100"
                            };
                        }
                        <td class="p-4 border border-gray-100 border-l-4 @borderleftcolor">@step.StepId</td>
                        <td class="p-4 border border-gray-100">@step.StepName</td>
                        <td class="p-4 border border-gray-100">@step.ExpectToHear</td>
                        <td class="p-4 border border-gray-100">@step.Transcription</td>
                        <td class="p-4 border border-gray-100">@step.ReplyWith</td>
                        <td class="p-4 border border-gray-100">
                            @{
                                var color = step.Status.ToLower() switch
                                {
                                    "passed" => "bg-green-500",
                                    "failed" => "bg-red-400",
                                    "callinprogress" => "bg-yellow-200",
                                    "notrun" => "bg-grey-200",
                                    "errored" => "bg-red-600",
                                    _ => "bg-yellow-100"
                                };
                            }
                            <span class="border-2 border-solid font-extrabold text-xl text-center @color rounded-lg">
                                @step.Status</span>
                            <li class="font-light mt-2">Mathed with confidence: @step.Confidence%</li>
                            <li class="font-light">Duration: @step.StepDuration</li>
                            <li class="font-light">Response time: @step.ResponseTime</li>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@section Scripts
{
    <script>
        window.onload = async function loadAudio(runId) {
            try {
                const audioPlayer = document.getElementById('audio-player');
                audioPlayer.style.display = "none";
                // Fetch audio file from the backend
                const url = `/api/audio?runId=${runId}`;
                const response = await fetch(url);

                // Check if the response is successful
                if (!response.ok) {
                    throw new Error('Failed to fetch audio.');
                }

                // Convert the response into a blob
                const audioBlob = await response.blob();

                // Create an object URL from the audio Blob
                const audioUrl = URL.createObjectURL(audioBlob);

                // Get the audio element and update its source
                const audioSource = document.getElementById('audio-source');
                audioSource.src = audioUrl;

                // Reload the audio player to update the source and play
                audioPlayer.load();
                const audioSpinner = document.getElementById('audio-spinner');
                audioSpinner.style.display = "none";
                audioPlayer.style.display = "block";
            } catch (error) {
                console.error('Error loading audio:', error);
            }
        }

        async function playAudio(runId) {
            try {
                const audioPlayer = document.getElementById('audio-player');
                audioPlayer.play();
            } catch (error) {
                console.error('Error loading audio:', error);
            }
        }
    </script>
}
